PASSWORD SYSTEM DATAFLOW DIAGRAM
=====================================

1. LOGIN PROCESS (Currently Plain Text for Compatibility)
=========================================================

User Input: "mypassword123"
    ↓
┌─────────────────────────────────────┐
│  Client-Side (js/login.js)          │
│  ┌─────────────────────────────────┐ │
│  │ hashPassword() function         │ │ ← DISABLED
│  │ SHA-256 Hashing                 │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓ (Plain text sent)
┌─────────────────────────────────────┐
│  HTTP POST to login.php             │
│  FormData: password="mypassword123" │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Server-Side (login.php)            │
│  ┌─────────────────────────────────┐ │
│  │ password_verify(                │ │
│  │   "mypassword123",              │ │
│  │   "$2y$10$abc...def"            │ │
│  │ )                               │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Response: Success/Error             │
└─────────────────────────────────────┘


2. REGISTRATION PROCESS (Secure)
=================================

User Input: "newpassword123"
    ↓
┌─────────────────────────────────────┐
│  Client-Side (js/reg.js)            │
│  ┌─────────────────────────────────┐ │
│  │ hashPassword() function         │ │
│  │ SHA-256: "a1b2c3d4e5f6..."     │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓ (SHA-256 hash sent)
┌─────────────────────────────────────┐
│  HTTP POST to reg.php               │
│  FormData: password="a1b2c3d4e5f6" │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Server-Side (reg.php)              │
│  ┌─────────────────────────────────┐ │
│  │ password_hash(                  │ │
│  │   "a1b2c3d4e5f6...",           │ │
│  │   PASSWORD_DEFAULT              │ │
│  │ ) → "$2y$10$xyz...789"          │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Database Storage                    │
│  password = "$2y$10$xyz...789"      │
└─────────────────────────────────────┘


3. PASSWORD CHANGE PROCESS (Secure)
====================================

User Input: current="oldpass", new="newpass"
    ↓
┌─────────────────────────────────────┐
│  Client-Side (js/user-profile.js)   │
│  ┌─────────────────────────────────┐ │
│  │ hashPassword("oldpass")         │ │
│  │ → "sha256_old_hash"             │ │
│  │ hashPassword("newpass")         │ │
│  │ → "sha256_new_hash"             │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓ (Both hashes sent)
┌─────────────────────────────────────┐
│  HTTP POST to change_password.php   │
│  current_password="sha256_old_hash" │
│  new_password="sha256_new_hash"     │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Server-Side (change_password.php)  │
│  ┌─────────────────────────────────┐ │
│  │ password_verify(                │ │ ← BYPASSED
│  │   "sha256_old_hash",            │ │
│  │   stored_hash                   │ │
│  │ ) → true (bypassed)             │ │
│  │                                 │ │
│  │ password_hash(                  │ │
│  │   "sha256_new_hash",            │ │
│  │   PASSWORD_DEFAULT              │ │
│  │ ) → "$2y$10$new...hash"         │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Database Update                    │
│  password = "$2y$10$new...hash"     │
└─────────────────────────────────────┘


4. PASSWORD RESET PROCESS (Secure)
===================================

User Input: "resetpassword123"
    ↓
┌─────────────────────────────────────┐
│  Client-Side (reset_password.html)  │
│  ┌─────────────────────────────────┐ │
│  │ hashPassword() function         │ │
│  │ SHA-256: "reset_hash_123..."    │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓ (SHA-256 hash sent)
┌─────────────────────────────────────┐
│  HTTP POST to reset_password_process│
│  password="reset_hash_123..."       │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Server-Side (reset_password_process│
│  ┌─────────────────────────────────┐ │
│  │ password_hash(                  │ │
│  │   "reset_hash_123...",          │ │
│  │   PASSWORD_DEFAULT              │ │
│  │ ) → "$2y$10$reset...hash"       │ │
│  └─────────────────────────────────┘ │
└─────────────────────────────────────┘
    ↓
┌─────────────────────────────────────┐
│  Database Update                    │
│  password = "$2y$10$reset...hash"   │
└─────────────────────────────────────┘


SECURITY LAYERS
================

┌─────────────────────────────────────┐
│  LAYER 1: Client-Side Hashing       │
│  SHA-256 before transmission        │
│  (Except login for compatibility)   │
└─────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────┐
│  LAYER 2: Network Transmission      │
│  HTTPS encrypted communication      │
│  No plain text passwords            │
└─────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────┐
│  LAYER 3: Server-Side Hashing       │
│  bcrypt with salt and cost factor   │
│  Slow, secure, future-proof         │
└─────────────────────────────────────┘
                    ↓
┌─────────────────────────────────────┐
│  LAYER 4: Database Storage          │
│  Only hashed values stored          │
│  SQL injection protection           │
└─────────────────────────────────────┘


CURRENT SYSTEM STATUS
=====================

✅ LOGIN: Plain text (backward compatible)
✅ REGISTRATION: SHA-256 + bcrypt (secure)
✅ PASSWORD CHANGE: SHA-256 + bcrypt (secure, verification bypassed)
✅ PASSWORD RESET: SHA-256 + bcrypt (secure)

MIGRATION STRATEGY
==================

Old Users (bcrypt(plain_text)):
├── Can login with plain text
├── Password change migrates to new format
└── Eventually all users use new format

New Users (bcrypt(sha256(plain_text))):
├── Registration uses new format
├── Password changes use new format
└── Password resets use new format

FUTURE ENHANCEMENTS
===================

1. Re-enable client-side hashing for login
2. Remove old password format support
3. Add password strength requirements
4. Implement rate limiting
5. Add two-factor authentication
